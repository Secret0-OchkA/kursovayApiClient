/**
 * My API - V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: ne bydet
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Department from '../model/Department';

/**
* Department service.
* @module api/DepartmentApi
* @version v1
*/
export default class DepartmentApi {

    /**
    * Constructs a new DepartmentApi. 
    * @alias module:api/DepartmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDepartment operation.
     * @callback module:api/DepartmentApi~createDepartmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create department in company
     * @param {Number} companyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Department} opts.department 
     * @param {module:api/DepartmentApi~createDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createDepartment(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['department'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createDepartment");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/Department', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDepartment operation.
     * @callback module:api/DepartmentApi~deleteDepartmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete department in company
     * @param {Number} companyId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.departmnetId 
     * @param {module:api/DepartmentApi~deleteDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDepartment(companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteDepartment");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
        'departmnetId': opts['departmnetId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/Department', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepartment operation.
     * @callback module:api/DepartmentApi~getDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Department} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get department by id in company
     * @param {Number} companyId 
     * @param {Number} departmnetId 
     * @param {module:api/DepartmentApi~getDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Department}
     */
    getDepartment(companyId, departmnetId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getDepartment");
      }
      // verify the required parameter 'departmnetId' is set
      if (departmnetId === undefined || departmnetId === null) {
        throw new Error("Missing the required parameter 'departmnetId' when calling getDepartment");
      }

      let pathParams = {
        'companyId': companyId,
        'departmnetId': departmnetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Department;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/Department/{departmnetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepartments operation.
     * @callback module:api/DepartmentApi~getDepartmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Department>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get departments in company
     * @param {Number} companyId 
     * @param {module:api/DepartmentApi~getDepartmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Department>}
     */
    getDepartments(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getDepartments");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Department];
      return this.apiClient.callApi(
        '/api/Company/{companyId}/Department', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setBugetDeparmtnet operation.
     * @callback module:api/DepartmentApi~setBugetDeparmtnetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Department} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * set buget department by id in company
     * @param {Number} departmnetId 
     * @param {String} companyId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.buget 
     * @param {module:api/DepartmentApi~setBugetDeparmtnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Department}
     */
    setBugetDeparmtnet(departmnetId, companyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'departmnetId' is set
      if (departmnetId === undefined || departmnetId === null) {
        throw new Error("Missing the required parameter 'departmnetId' when calling setBugetDeparmtnet");
      }
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling setBugetDeparmtnet");
      }

      let pathParams = {
        'departmnetId': departmnetId,
        'companyId': companyId
      };
      let queryParams = {
        'buget': opts['buget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Department;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/Department/{departmnetId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
