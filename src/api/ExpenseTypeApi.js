/**
 * My API - V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: ne bydet
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExpenseType from '../model/ExpenseType';

/**
* ExpenseType service.
* @module api/ExpenseTypeApi
* @version v1
*/
export default class ExpenseTypeApi {

    /**
    * Constructs a new ExpenseTypeApi. 
    * @alias module:api/ExpenseTypeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createExpenseTypeInCompany operation.
     * @callback module:api/ExpenseTypeApi~createExpenseTypeInCompanyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create new expenseType in company
     * @param {Number} companyId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ExpenseType} opts.expenseType 
     * @param {module:api/ExpenseTypeApi~createExpenseTypeInCompanyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createExpenseTypeInCompany(companyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['expenseType'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling createExpenseTypeInCompany");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/ExpenseType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExpenseTypeInCompany operation.
     * @callback module:api/ExpenseTypeApi~deleteExpenseTypeInCompanyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete expense type in company
     * @param {Number} companyId 
     * @param {Number} expenseTypeId 
     * @param {module:api/ExpenseTypeApi~deleteExpenseTypeInCompanyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExpenseTypeInCompany(companyId, expenseTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling deleteExpenseTypeInCompany");
      }
      // verify the required parameter 'expenseTypeId' is set
      if (expenseTypeId === undefined || expenseTypeId === null) {
        throw new Error("Missing the required parameter 'expenseTypeId' when calling deleteExpenseTypeInCompany");
      }

      let pathParams = {
        'companyId': companyId,
        'expenseTypeId': expenseTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/ExpenseType/{expenseTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEpxensTypesInCompany operation.
     * @callback module:api/ExpenseTypeApi~getEpxensTypesInCompanyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExpenseType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get expense types in company
     * @param {Number} companyId 
     * @param {module:api/ExpenseTypeApi~getEpxensTypesInCompanyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExpenseType>}
     */
    getEpxensTypesInCompany(companyId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getEpxensTypesInCompany");
      }

      let pathParams = {
        'companyId': companyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ExpenseType];
      return this.apiClient.callApi(
        '/api/Company/{companyId}/ExpenseType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenseTypeInCompany operation.
     * @callback module:api/ExpenseTypeApi~getExpenseTypeInCompanyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpenseType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get expense type in company by id
     * @param {Number} companyId 
     * @param {Number} expenseTypeId 
     * @param {module:api/ExpenseTypeApi~getExpenseTypeInCompanyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpenseType}
     */
    getExpenseTypeInCompany(companyId, expenseTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getExpenseTypeInCompany");
      }
      // verify the required parameter 'expenseTypeId' is set
      if (expenseTypeId === undefined || expenseTypeId === null) {
        throw new Error("Missing the required parameter 'expenseTypeId' when calling getExpenseTypeInCompany");
      }

      let pathParams = {
        'companyId': companyId,
        'expenseTypeId': expenseTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpenseType;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/ExpenseType/{expenseTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExpenseType operation.
     * @callback module:api/ExpenseTypeApi~updateExpenseTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * can change name,limit, description
     * @param {Number} companyId 
     * @param {Number} expenseTypeId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ExpenseType} opts.expenseType 
     * @param {module:api/ExpenseTypeApi~updateExpenseTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateExpenseType(companyId, expenseTypeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['expenseType'];
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling updateExpenseType");
      }
      // verify the required parameter 'expenseTypeId' is set
      if (expenseTypeId === undefined || expenseTypeId === null) {
        throw new Error("Missing the required parameter 'expenseTypeId' when calling updateExpenseType");
      }

      let pathParams = {
        'companyId': companyId,
        'expenseTypeId': expenseTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/ExpenseType/{expenseTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
