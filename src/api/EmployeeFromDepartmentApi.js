/**
 * My API - V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: ne bydet
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Employee from '../model/Employee';

/**
* EmployeeFromDepartment service.
* @module api/EmployeeFromDepartmentApi
* @version v1
*/
export default class EmployeeFromDepartmentApi {

    /**
    * Constructs a new EmployeeFromDepartmentApi. 
    * @alias module:api/EmployeeFromDepartmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dismissEmployee operation.
     * @callback module:api/EmployeeFromDepartmentApi~dismissEmployeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * remove employee from department in company
     * @param {Number} companyId 
     * @param {Number} departmnetId 
     * @param {Number} employeeId 
     * @param {module:api/EmployeeFromDepartmentApi~dismissEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employee}
     */
    dismissEmployee(companyId, departmnetId, employeeId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling dismissEmployee");
      }
      // verify the required parameter 'departmnetId' is set
      if (departmnetId === undefined || departmnetId === null) {
        throw new Error("Missing the required parameter 'departmnetId' when calling dismissEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling dismissEmployee");
      }

      let pathParams = {
        'companyId': companyId,
        'departmnetId': departmnetId,
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employee;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/Department/{departmnetId}/EmployeeFromDepartment/{employeeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeeInDepartment operation.
     * @callback module:api/EmployeeFromDepartmentApi~getEmployeeInDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Employee} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get employee in department in company by id
     * @param {Number} companyId 
     * @param {Number} departmnetId 
     * @param {Number} employeeId 
     * @param {module:api/EmployeeFromDepartmentApi~getEmployeeInDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Employee}
     */
    getEmployeeInDepartment(companyId, departmnetId, employeeId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getEmployeeInDepartment");
      }
      // verify the required parameter 'departmnetId' is set
      if (departmnetId === undefined || departmnetId === null) {
        throw new Error("Missing the required parameter 'departmnetId' when calling getEmployeeInDepartment");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getEmployeeInDepartment");
      }

      let pathParams = {
        'companyId': companyId,
        'departmnetId': departmnetId,
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Employee;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/Department/{departmnetId}/EmployeeFromDepartment/{employeeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEmployeesInDepartment operation.
     * @callback module:api/EmployeeFromDepartmentApi~getEmployeesInDepartmentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Employee>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get employees in department in company
     * @param {Number} companyId 
     * @param {Number} departmnetId 
     * @param {module:api/EmployeeFromDepartmentApi~getEmployeesInDepartmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Employee>}
     */
    getEmployeesInDepartment(companyId, departmnetId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling getEmployeesInDepartment");
      }
      // verify the required parameter 'departmnetId' is set
      if (departmnetId === undefined || departmnetId === null) {
        throw new Error("Missing the required parameter 'departmnetId' when calling getEmployeesInDepartment");
      }

      let pathParams = {
        'companyId': companyId,
        'departmnetId': departmnetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Employee];
      return this.apiClient.callApi(
        '/api/Company/{companyId}/Department/{departmnetId}/EmployeeFromDepartment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hireEmployee operation.
     * @callback module:api/EmployeeFromDepartmentApi~hireEmployeeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add epmployee to department
     * @param {Number} companyId 
     * @param {Number} departmnetId 
     * @param {Number} employeeId 
     * @param {module:api/EmployeeFromDepartmentApi~hireEmployeeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hireEmployee(companyId, departmnetId, employeeId, callback) {
      let postBody = null;
      // verify the required parameter 'companyId' is set
      if (companyId === undefined || companyId === null) {
        throw new Error("Missing the required parameter 'companyId' when calling hireEmployee");
      }
      // verify the required parameter 'departmnetId' is set
      if (departmnetId === undefined || departmnetId === null) {
        throw new Error("Missing the required parameter 'departmnetId' when calling hireEmployee");
      }
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling hireEmployee");
      }

      let pathParams = {
        'companyId': companyId,
        'departmnetId': departmnetId,
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Company/{companyId}/Department/{departmnetId}/EmployeeFromDepartment/{employeeId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
