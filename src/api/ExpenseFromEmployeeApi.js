/**
 * My API - V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: ne bydet
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Expense from '../model/Expense';

/**
* ExpenseFromEmployee service.
* @module api/ExpenseFromEmployeeApi
* @version v1
*/
export default class ExpenseFromEmployeeApi {

    /**
    * Constructs a new ExpenseFromEmployeeApi. 
    * @alias module:api/ExpenseFromEmployeeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeAmmount operation.
     * @callback module:api/ExpenseFromEmployeeApi~changeAmmountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Expense} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change ammout if not confirmed
     * @param {Number} employeeId 
     * @param {Number} expenseId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.amount 
     * @param {module:api/ExpenseFromEmployeeApi~changeAmmountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Expense}
     */
    changeAmmount(employeeId, expenseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling changeAmmount");
      }
      // verify the required parameter 'expenseId' is set
      if (expenseId === undefined || expenseId === null) {
        throw new Error("Missing the required parameter 'expenseId' when calling changeAmmount");
      }

      let pathParams = {
        'employeeId': employeeId,
        'expenseId': expenseId
      };
      let queryParams = {
        'amount': opts['amount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Expense;
      return this.apiClient.callApi(
        '/api/Employee/{employeeId}/ExpenseFromEmployee/{expenseId}/ChangeAmmount', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmExpense operation.
     * @callback module:api/ExpenseFromEmployeeApi~confirmExpenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Expense} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * confirm expense if expense is valid
     * @param {Number} employeeId 
     * @param {Number} expenseId 
     * @param {module:api/ExpenseFromEmployeeApi~confirmExpenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Expense}
     */
    confirmExpense(employeeId, expenseId, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling confirmExpense");
      }
      // verify the required parameter 'expenseId' is set
      if (expenseId === undefined || expenseId === null) {
        throw new Error("Missing the required parameter 'expenseId' when calling confirmExpense");
      }

      let pathParams = {
        'employeeId': employeeId,
        'expenseId': expenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Expense;
      return this.apiClient.callApi(
        '/api/Employee/{employeeId}/ExpenseFromEmployee/{expenseId}/Confirm', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExpense operation.
     * @callback module:api/ExpenseFromEmployeeApi~createExpenseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * create expense for employee
     * @param {Number} employeeId 
     * @param {Object} opts Optional parameters
     * @param {module:model/Expense} opts.expense 
     * @param {module:api/ExpenseFromEmployeeApi~createExpenseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createExpense(employeeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['expense'];
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling createExpense");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/Employee/{employeeId}/ExpenseFromEmployee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpense operation.
     * @callback module:api/ExpenseFromEmployeeApi~getExpenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Expense} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get expense in employee
     * @param {Number} employeeId 
     * @param {Number} expenseId 
     * @param {module:api/ExpenseFromEmployeeApi~getExpenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Expense}
     */
    getExpense(employeeId, expenseId, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getExpense");
      }
      // verify the required parameter 'expenseId' is set
      if (expenseId === undefined || expenseId === null) {
        throw new Error("Missing the required parameter 'expenseId' when calling getExpense");
      }

      let pathParams = {
        'employeeId': employeeId,
        'expenseId': expenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Expense;
      return this.apiClient.callApi(
        '/api/Employee/{employeeId}/ExpenseFromEmployee/{expenseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpenses operation.
     * @callback module:api/ExpenseFromEmployeeApi~getExpensesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Expense>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get expenses in emploee
     * @param {Number} employeeId 
     * @param {module:api/ExpenseFromEmployeeApi~getExpensesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Expense>}
     */
    getExpenses(employeeId, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling getExpenses");
      }

      let pathParams = {
        'employeeId': employeeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Expense];
      return this.apiClient.callApi(
        '/api/Employee/{employeeId}/ExpenseFromEmployee', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setExpenseType operation.
     * @callback module:api/ExpenseFromEmployeeApi~setExpenseTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Expense} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * change type if not confirmed
     * @param {Number} employeeId 
     * @param {Number} expenseId 
     * @param {Number} expenseTypeId 
     * @param {module:api/ExpenseFromEmployeeApi~setExpenseTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Expense}
     */
    setExpenseType(employeeId, expenseId, expenseTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling setExpenseType");
      }
      // verify the required parameter 'expenseId' is set
      if (expenseId === undefined || expenseId === null) {
        throw new Error("Missing the required parameter 'expenseId' when calling setExpenseType");
      }
      // verify the required parameter 'expenseTypeId' is set
      if (expenseTypeId === undefined || expenseTypeId === null) {
        throw new Error("Missing the required parameter 'expenseTypeId' when calling setExpenseType");
      }

      let pathParams = {
        'employeeId': employeeId,
        'expenseId': expenseId,
        'expenseTypeId': expenseTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Expense;
      return this.apiClient.callApi(
        '/api/Employee/{employeeId}/ExpenseFromEmployee/{expenseId}/SetType/{expenseTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateEpxense operation.
     * @callback module:api/ExpenseFromEmployeeApi~validateEpxenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Expense} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validate expense
     * @param {Number} employeeId 
     * @param {Number} expenseId 
     * @param {module:api/ExpenseFromEmployeeApi~validateEpxenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Expense}
     */
    validateEpxense(employeeId, expenseId, callback) {
      let postBody = null;
      // verify the required parameter 'employeeId' is set
      if (employeeId === undefined || employeeId === null) {
        throw new Error("Missing the required parameter 'employeeId' when calling validateEpxense");
      }
      // verify the required parameter 'expenseId' is set
      if (expenseId === undefined || expenseId === null) {
        throw new Error("Missing the required parameter 'expenseId' when calling validateEpxense");
      }

      let pathParams = {
        'employeeId': employeeId,
        'expenseId': expenseId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Expense;
      return this.apiClient.callApi(
        '/api/Employee/{employeeId}/ExpenseFromEmployee/{expenseId}/Validate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
